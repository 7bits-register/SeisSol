#!/usr/bin/env python
##
# @file
# This file is part of SeisSol.
#
# @section LICENSE
# Copyright (c) SeisSol Group
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
# 
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from this
#    software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

Import('env','Glob')


try:
        env['HDF5']
        sources = Glob('*.f90') + Glob('*.f')+ Glob('*.cpp')
        print 'Using HDF5 support'
#        objs =  env.Object(['vtkWriter.cpp','pvdWriter.cpp','vtk_writer.f90','pvd_writer.f90','analyse_seissol.f90', 'data_output.f90', 'inioutput_seissol.f90', 'common_receiver.f90', 'receiver_hdf.f90', 'plot_fields.f90', 'printthistimestep.f90', 'restart_data.f90', 'output_rupturefront.f90', 'hdf_output_utils.f90', 'hd_output.f90', 'faultoutput.f90', 'ini_faultoutput.f90', 'magnitude_output.f90'])
        objs =  env.Object(['vtkWriter.cpp','pvdWriter.cpp','WaveFieldWriterC.cpp','vtk_writer.f90','pvd_writer.f90','analyse_seissol.f90', 'data_output.f90', 'inioutput_seissol.f90', 'common_receiver.f90', 'common_fault_receiver.f90', 'receiver_hdf.f90', 'plot_fields.f90', 'printthistimestep.f90', 'output_rupturefront.f90', 'hdf_output_utils.f90', 'hd_output.f90', 'hdf_faultoutput.f90', 'faultoutput.f90', 'ini_faultoutput.f90', 'vertex_hashmap.cpp', 'magnitude_output.f90','WaveFieldWriterF.f90', 'xdmfwriter/ParallelVertexFilter.cpp'])

except KeyError:
        print 'HDF5 key not initialized'
        print 'HDF5 is off'
        sources = Glob('*.f90') + Glob('*.f')+ Glob('*.cpp')

        objs = env.Object(['vtkWriter.cpp','pvdWriter.cpp','WaveFieldWriterC.cpp','vtk_writer.f90','pvd_writer.f90','vertex_hashmap.cpp','analyse_seissol.f90', 'data_output.f90', 'inioutput_seissol.f90', 'common_receiver.f90', 'common_fault_receiver.f90', 'receiver.f90', 'plot_fields.f90', 'printthistimestep.f90', 'output_rupturefront.f90','faultoutput.f90', 'ini_faultoutput.f90', 'magnitude_output.f90','WaveFieldWriterF.f90'])

Return('objs')
